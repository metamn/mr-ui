{"version":3,"file":"static/iframe.611c3cf8fedbb11f8a37.bundle.js","sources":["webpack:///./src/components/TextAroundCircle/TextAroundCircle.js"],"sourcesContent":["/**\n * Text Around Circle\n *\n * Displays a text like beeing wrapped around a circle.\n *\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport styled, {css} from 'styled-components';\n\nimport Repeat from './../../framework';\n\n\n/**\n * The loading container\n */\nconst Loading = styled.div``;\n\n\n/**\n * The main container\n */\nconst Container = styled.div`\n\tposition: relative;\n\tdisplay: flex;\n\twidth: ${props => props.size ? props.size : 'auto'};\n\theight: ${props => props.size ? props.size : 'auto'};\n\toverflow: hidden;\n`;\n\n\n/**\n * The characters container\n * - it is needed to reposition the rotated chars\n * - otherwise they will be positioned outside the main container\n */\nconst CharsContainer = styled.div`\n\twidth: 100%;\n\theight: 100%;\n\ttransform: translateX(calc(${props => props.size} / 2));\n`;\n\n\n/**\n * A single character container\n */\nconst Char = styled.div`\n\t--angleSpan: ${props => props.angleSpan ? props.angleSpan : '360deg'};\n\t--angleOffset: ${props => props.angleOffset ? props.angleOffset : '0deg'};\n\t--angleOfChar: calc(var(--angleSpan) / ${props => props.charsLength});\n\t--deg: calc(var(--angleOffset) + var(--angleOfChar) * ${props => props.index});\n\n\tposition: absolute;\n\theight: ${props => props.size ? props.size : 'auto'};\n\ttransform: rotate(var(--deg, 0deg));\n`;\n\n\n/**\n * The main class\n */\nclass TextAroundCircle extends React.Component {\n\trender() {\n\t\tconst {text, size, angleSpan, angleOffset, loading, className} = this.props;\n\t\tconst chars=[...text];\n\t\tconst charsLength = chars.length;\n\n\t\tif (loading) {\n\t\t\treturn (\n\t\t\t\t<Loading className={className}>Loading ...</Loading>\n\t\t\t)\n\t\t}\n\n\t\treturn (\n\t\t\t<Container\n\t\t\t\tisDemo={true}\n\t\t\t\tsize={size}\n\t\t\t\tclassName={className}\n\t\t\t\t>\n\t\t\t\t<CharsContainer size={size}>\n\t\t\t\t\t<Repeat numberOfTimes={charsLength} startAt={0}>\n\t\t\t\t\t\t{(i) => <Char\n\t\t\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t\t\t\tindex={i}\n\t\t\t\t\t\t\t\t\tcharsLength={charsLength}\n\t\t\t\t\t\t\t\t\tsize={size}\n\t\t\t\t\t\t\t\t\tangleSpan={angleSpan}\n\t\t\t\t\t\t\t\t\tangleOffset={angleOffset}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{chars[i]}\n\t\t\t\t\t\t\t\t</Char>\n\t\t\t\t\t\t}\n\t\t\t\t\t</Repeat>\n\t\t\t\t</CharsContainer>\n\t\t\t</Container>\n\t\t)\n\t}\n}\n\n/**\n * The prop types\n */\nTextAroundCircle.propTypes = {\n\t/**\n\t * The text to be displayed\n\t */\n\ttext: PropTypes.string.isRequired,\n\n\t/**\n\t * The size of rectangle (the container).\n\t * - It's more about the height than the width\n\t * - If the text overflows the container it will automatically truncated\n\t */\n\tsize: PropTypes.string,\n\n\t/**\n\t * The span of the circle.\n\t * - If it's `180deg` then it is a half circle.\n\t */\n\tangleSpan: PropTypes.string,\n\n\t/**\n\t * The offset of the first char on the circle.\n\t */\n\tangleSpan: PropTypes.string,\n\n\t/**\n\t * Component is loading?\n\t */\n\tloading: PropTypes.bool,\n\n\t/**\n\t * Additional classname to add to the component\n\t */\n\tclassName: PropTypes.string,\n};\n\n/**\n * Default props\n */\nTextAroundCircle.defaultProps = {\n\tloading: false,\n\tclassName: '',\n\tsize: '20em',\n\tangleSpan: '360deg',\n\tangleOffset: '0deg',\n};\n\n/**\n * Export the complete class\n */\nexport default TextAroundCircle;\n"],"mappings":"AAgBA","sourceRoot":""}